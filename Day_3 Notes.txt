RANGE-FOR CONSTRUCT:
  This loop construct is primarily designed to work on collection types, types hold arbitrary or finite quantum of values having a definite starting address and an definite ending address.
  
    for eg:
      - Could an array type
      - could be an instance of STL container class.

for(data_type var:collection_instance)
{
  //..
}      
  
list<int> ls1;
//...

//Given the foll: statement the range-for construct will loop thru from 'begin' to 'end' of the list collection, 
//for every looping or iteration, it would pick a value and initialize 'x'.
for(int x: ls1)
{
  //...
}  

How do we specify a particular starting and ending location for a given collection.

list<int> ls1;

We wish to start from the 40th index and proceed till only the 80th index of the collection

auto itr = ls1.begin();

list<int>::iterator start(itr+=40);    // start(itr.operator +=(40)); 
itr = ls1.begin():
list<int>::iterator end(itr+=80);

for_each(start, end, function_name);
-------------------------------------------------------
How can the following 'class Data' be made range-for compatible type ?

The class has multiple data members of collections types..

class Data
{
private:
  int arr[10];
  list<int> ls1;
  vector<float> v1;
  //...
public:
  begin()
  {
  }
  
  end()
  {
  }
};

Let us refactor the above code, such that each collection data-member is an instance of a seperate class...

class intArray
{
private:
  int arr[10];
public:
  auto begin(){ return arr; }
  auto end(){ return &arr[10]; }  
};

class intList
{
private:
  list<int> ls1;
public:
    auto begin(){ return ls1.begin(); }
    auto end(){ return ls1.end(); }
};

class floatVector
{
private:
  vector<float> v1;
public:
    auto begin(){ return v1.begin(); }
    auto end(){ return v1.end(); }
};

Now the modified 'class Data' will look as follows:

class Data
{
private:
  intArray ob1;
  intList ob2;
  floatVector ob3;
public:
    //...
    //provide suitable getter functions
    intArray& GetArray()
    {
       return ob1;
    }
    
    intList& GetList()
    {
       return ob2;
    }
    
    floatVector& GetVector()
    {
      return obj3;
    }
};

//***consumer code**********
int main()
{
  Data obj1;
                 //Data::ob1
  for(auto x: obj1.GetArray())
  {
    //....
  }
             // Data::ob2
  for(auto x:obj1.GetList())
  {
    //..
  }
             // Data::ob3
  for(auto x:obj1.GetVector())
  {
    //..
  }
}

FACILITATING A READ-ONLY OPERATION WHILE USING RANGE-FOR CONSTRUCT ON AN COLLECTION:-

class CArray()
{
private:
  int arr[10];
public:
  const int* begin()
  {
    return arr;
  }   
  
  const int* end()
  {
    return &arr[10];
  }
};

************************
class MyList
{
private:
  list<int> ls1;
public:
    decltype(auto) begin()
    {
      //return ls1.begin();
      return ls1.cbegin();
    }
    
    decltype(auto) end()
    {
      //return ls1.end();
      return ls1.cend():
    }
};
----------------------------------------------  
INITIALIZER_LIST:
Initializer_list:
  A light-weight generic wrapper class library.
  An instance of this type can hold any number of parameters of homogenous type.
  Very useful when we want to recieve and pass a large values into a collection type
  data member of a class.

//Progammer-1  
class Data
{
private:
  int arr[20];
public:
  //Bad approach - Not scalable as array size changes
  CA(int x1, int x2, ... int x10)
  { }
  //An alternate approach, Can scale even if the array size changes
  CA(int*p, int size)
  {
    //...
  }
};  


//consumer code
int main()
{ 
  //40 byte instance, resides on the stack, life-time is 'main' lifetime.
  //Data ob1(10,20,30,40,50...); 
   
  //80 byte array
  int local_array[20]={....};
  
  //80 byte object
  Data ob1(local_array, 20);
  /*
      To define a 80 byte 'Data' class object and initialize the same, we also 
      need to define another 80 byte array instance.
      
  
  */
return 0;
};

#include<initializer_list>

class Data
{
private:
  int arr[20];
public:

  Data(initializer_list<int> x)
  {
      int i=0
     for(auto val: x)
     {
       arr[i] = val;
       i++;
     }
  }

};

//consumer code
int main()
{
  Data ob1{10,20,30,40,50,60...};
};

----------------------------------------
class Data
{
private: 
  int x;
  float y;
  int arr[20];
 
public:
   Data(int val1, float val2, initializer_list<int> val3):x(val1), y(val2)
   { 
      for...
   }
};

//consumer code
int main()
{
  Data ob1{{100}, {45.12f},{10,20,30,40,50...}};
}
------------------------------------
template<typename T> class vector
{
 public:
  //...
  vector(initializer_list<T> x)
  { ... }
};
class Data
{
private: 
  int x;
  float y;
  vector<int> v;
 
public:
   Data(int val1, float val2, initializer_list<int> val3):x(val1), y(val2), v(val3)
   { 
    
   }
};

//consumer code
int main()
{
  Data ob1{{100}, {45.12f},{10,20,30,40,50...}};
}


-------------------------------------------

RVALUE & LVALUE types:

Entities that can be present either on the left hand side of an equation or on the right hand side of an equation is an LVALUE type [stands for LEFT HAND SIDE VALUE]. For eg: It could be any named entity.

Entities that can only be present on the right hand side of an equation are known as RVALUE types [stands for RIGHT HAND SIDE VALUE]. For eg: It could be any literal (numeric/non-numeric/class type), entities that generally do not have a name. Even the return value of a function is RVALUE, because this temporary does not have any name.


int fun()
{
  int a;   //LVALUE
  //...
  return a;    //assume it is returning 100
} 


int main()
{
  int result;   //LVALUE
  //..
  result = fun();    // result = 100;
}

Let us consider the foll: equations...

int a,b;
a = 100;           // LVALUE = RVALUE
b = a;             // LVALUE = LVALUE

100 = a;      //error  
------------------------------------------------------  
Now in modern C++ a reference type entity can be categorized into 2 diff. forms or types..

         REFERENCE TYPE
              |
       |----------------|
    lvalue            rvalue

What is the syntax for declaring a lvalue and rvalue reference types...

LVALUE REFERENCE TYPE: At the point of declaration of an entity, prefixing a single '&' is termed as LVALUE reference type.

int a;
int& ref1 = a;  //ok
int& ref = 100; //error

RVALUE REFERENCE TYPE: At the point of declaration, prefixing it with a 2 '&' is termed as RVALUE reference type.

for eg:

int&& ref1 = a;
int&& ref2 = 100;

So, in a modern C++ class we can have a pair of copy constructor and a pair of assignment function.

class CA
{
public:
  //LVALUE PAIR
  CA(const CA& x);
  CA& operator = (const CA& x);
  
  //RVALUE PAIR
  CA(CA&& x);
  CA& operator =(CA&& x);
};
--------------------------------------------
REFERENCE COLLAPSING:-

template<typename T> void fun3(T& x)   // void fun3(int&& & & x)   //int& 
{ 

}

template<typename T> void fun2(T& x)   // void fun2(int&& & x)     ===>int&& &
{ 
   fun3(x);
}

template<typename T> void fun1(T& x)  // void fun1(int&& x)    ===> int&& 
{ 
   fun2(x);
}

template<typename T> void fun(T& x)  // void fun(int& x)  T ===> int&
{ 
  fun1(x);
}

//***consumer code******
int main()
{
  int a;
  fun(a);
}

Now that in modern C++, both a single '&' and a double '&&' have special meaning, and during template instantiations by the compiler yields more than 2 '&', then how many should they ignore and how many should be retained ?

The decision was simple:
  If the '&' count yielded odd number - retain one
  if the '&' count yielded even number - retain two
----------------------------------------------------------------------------

int a;
int& ref = a;  // The term 'int& ' means it is an alias type to an integer variable

int& ref = 100;  //error, 'ref' is declared to an alias to an integer variable, 100 is a integer const.

correction or solution for the above issue..

const int& ref = 100;  //ok, as 'ref' is declared to be an alias to an 'const int'
------------------------------
Note: 
  An LVALUE reference type would only act as an alias to an LVALUE type, where as an RVALUE reference type will act as an alias to both LVALUE type as well as RVALUE types.
**********************
A function with RVALUE reference type would be more scalable when compared to LVALUE Reference type:

//Traditional approach

template<typename T1, typenameT2> class Mydata
{
  private:
   vector<T1> v1;
   vector<T2> v2;
 public:
  void Populate(T1& x, T2& y)
 {
  v1.push_back(x);
  v2.push_back(y);
 }
 void Populate(T1& x, const T2& y)
 {
  v1.push_back(x);
  v2.push_back(y);
 }
 void Populate(const T1& x, T2& y)
 {
  v1.push_back(x);
  v2.push_back(y);
 }
 void Populate(const T1& x, const T2& y)
 {
  v1.push_back(x);
  v2.push_back(y);
 }

};

Modern Approach - No overloading of 'Populate'

template<typename T1, typenameT2> class Mydata
{
  private:
   vector<T1> v1;
   vector<T2> v2;
 public:
  void Populate(T1&& x, T2&& y)
 {
  v1.push_back(x);
  v2.push_back(y);
 }
};
  
-----------------------------------------------
MOVE COPY AND MOVE ASSIGNMENT FUNCTION:-

In a traditional C++ class, we don't happen define a copy constructor or an assignment function, then the compiler is expected to generate one for the class under the 'public' access specifier. This compiler generated methods employ a business plan which is also termed as BIT-WISE / MEMBER-TO-MEMBER and at times also called SHALLOW operation.  

If in-case the programmer decides to define their own copy constructor or assignment function, then the compiler will not assume any. Further, the programmer defined methods will employ algorithms as defined by the programmer, that may be 
  -BIT-WISE / MEMBER-TO-MEMBER and at times also called SHALLOW operation (or)
  -DEEP COPY/ DEEP ASSIGNMENT
  
  The general practice is, if the programmer wishes for BIT-WISE operation, then they would generally depend the compiler synthesized methods, and if the programmer wished for DEEP copy or DEEP assignment operation, then they would be compelled to define their own custom copy constructor and assignment function.
  
  Compiler Generates: bit-wise/shallow
  Programmer defines: deep copy or deep assignment.
  
Now in modern C++ the programmer has the flexibility of having both pairs of COPY CONSTRUCTOR and ASSIGNMENT function operations defined in a single class.

   Desires to go for DEEP copy or DEEP ASSIGNMENT operation ?
      LVALUE copy constructor and LVALUE ASSIGNMENT FUNCTION:
      
      class CA
      {
         public:
           //...
           /*
              - It is always a READ-ONLY business on the SOURCE, and a WRITE operation on the TARGET
           */
           CA(const CA& x);
           CA& operator =(const CA& x);
      };
      
      
   Desires to go for shallow/bit-wise operation ?
    RVALUE copy constructor and RVALUE ASSIGNMENT function:
       
      class CA
      {
         public:
           //...
           /*
              - It is READ cum WRITE business on the SOURCE, and a WRITE operation on the TARGET
           */
           CA(CA&& x);
           CA& operator =(CA&& x);
      };
-------------------------------------------------------------
LVALUE/RVALUE pairs of copy constructor/assignment functions (contd...):-

If the author of the class decides to provide an option to the class consumer, whether they want to go for a DEEP copy or DEEP assignment operation only. Then the class would be introduced only with LVALUE pairs of copy constructor and assignment function.

If the author of the class decides to provide an option to the class consumer, whether they want to go for a SHALLOW copy or SHALLOW assignment operation only. Then the class would be introduced only with RVALUE pairs of copy constructor and assignment function.

At times the programmer of a class may provide both options to the class consumer.

Note: The decision of deciding between LVALUE pairs and RVALUE pairs always arises only in the context of a class exhibiting PIMPL model.


****************************
Design a class that is MOVE-ONLY type.

class CA
{
private:
  //...
public:
  //...
  CA(const CA& x) = delete;
  CA& operator =(const CA& x)=delete;
  
  CA(CA&& x){ }
  CA& operator =(CA&& x){  }  
};
---------------------------------------------------
VARIADIC TEMPLATES:
  - A variadic function template
  
    template<typename... T> void fun(T ...Args) { }
          (or)
    template<typename  ...  T> void fun(T ...Args) { }
          (or)
    template<typename ...T> void fun(T ...Args) { }
     
    //Implementation of the above function
    
    fun(10,45.12f, 'a', 89);

     2nd form of a variadic function
     
     template<typename T, typename... PACK> void fun(T x, PACK ...Args)
     { 
        // Where T is non-variadic and
        // PACK is a variadic
     }
------------------------------------------------------------     
In order to process the arbitrary number of values received by a variadic function, the process is as follows:
      - Unpack the parameter pack (variadic element) and pick one value 
               : We need to go for a recursive call.
      - In order to hold or receive the value that just got unpacked from the parameter pack we provide a placeholder variable as the first formal parameter of the function.
    The above 2 process should continue for how long ?
       - As long as there is only 1 value in the parameter pack (or) 
       - The pack is empty..
       When the above circumstances arise, we need to break or come out of the recursion process. For which purpose we provide an additional overload function that either takes a single formal parameter or no parameter.
   *****************************************
    FORM-1: Suitable to accept arbitrary number of arguments of homogenous type...   
    template<typename... T> void fun(T ...Args) { }

    FORM-2: Suitable to accept arbitrary number of arguments of heterogenous types...
    template<typename T, typename... PACK> void fun(T x, PACK ...Args)
     { 
        // Where T is non-variadic and
        // PACK is a variadic
     }

-----------------------------------------------------------
A CALLBACK FUNCTION:-

void Callback(void(*ff)())
{
}

In the above function, the consumer has no choice with regard to the function, each time one tries make a call or implement the above function, the consumer is mandated to always pass address of a function of the form 'return-type void and input-type void'.

How about designing a callback function that provides the choice of the function form to the consumer ?
Answer is - make use of variadic function templates in modern C++.
----------------------------------------------------------
Var args. function...
Now in modern C++ we have variadic templates...
We can design or write generic code that can handle arbitary numbers of parameters, these parameters may be homogenous or heterogenous types.

  -Variadic function templates
  -Variadic class templates
  
  The form of a variadic function template can as follows:

template<typename... PACK> return_type function_name(PACK ...args)
{
         // PACK ...args   --> Arbitary numbers of inputs of the type PACK
}  

(or)
template<typename ... PACK> return_type function_name(PACK ...args)
{

} 

(or)
template<typename ...PACK> return_type function_name(PACK ...args)
{

} 

// Processing the values received by a variadic function....

//Approach-1
  -The idea is to have additional formal parameter that act's as place holder for every value that we plan to un-pack from the variadic collection.
  - In-order to un-pack the elements of the variadic collection or list, we try to make a recursive call to the function, during each call it is expected to un-pack one value from the collection. 
  - The recursion has to break when either the pack is empty or is holding the last or a single value, for which we need to have another overloaded function to address this issue.
  
  For eg:
  
  //overloaded function
  template<typename T> void Fun(T x)
  {
  
  }
  
  template<typename T, typename... PACK> void Fun(T x, PACK ...Args)
  {
     cout << x;
     Fun(Args...);  // Fun() (or) Fun(one_value)
  }
****************************************************************************

//consumer end
Print(10,56,89,43.21,'a','b',98.21f);

stage-1

void Fun(T x=10, PACK ...Args =(56,89,43.21,'a','b',98.21f))
{
   cout << x;
   Fun(Args...);  // Fun(56,89,43.21,'a','b',98.21f);
}

stage-2

void Fun(T x=56, PACK ...Args =(89,43.21,'a','b',98.21f))
{
   cout << x;
   Fun(Args...);  // Fun(89,43.21,'a','b',98.21f);
}

stage-3

void Fun(T x=89, PACK ...Args =(43.21,'a','b',98.21f))
{
   cout << x;
   Fun(Args...);  // Fun(43.21,'a','b',98.21f);
}
//...

Last but one stage:
void Fun(T x='b', PACK ...Args =(98.21f))
{
   cout << x;
   Fun(Args...);  // Fun(98.21f); --> we call the overloaded funct.
}
-----------------------
FOLD EXPRESSIONS:

template<typename... Args> auto SumVal(Args ...Data)
{
	return (Data + ...);
}

Hypothetical instantiation of the above variadic function for the call statement below:

cout << SumVal(10, 20, 30, 40, 50) << endl;

template<> auto SumVal(int x1, int x2, int x3, int x4, int x5)  // SumVal... HHHHH
{...}

cout << SumVal(10, 20.32f, 30, 40.67, 50) << endl;

template<> auto SumVal(int x1, float x2, int x3, double x4, int x5)  // SumVal... HMHNH
{...}


************************************************
STAGE-1

template<typename... Args> auto SumVal(Args ...Data)   //  ...Data  ===> (10, 20, 30, 40, 50) 
{
	return (Data + ...);    // return (10 + [20, 30, 40, 50]);
	//        x1 + ...);    // return (x1 +[x2,x3,x4,x5]);
}

STAGE-2

template<typename... Args> auto SumVal(Args ...Data)   //  ...Data  ===> (10, 20, 30, 40, 50) 
{
	return (Data + ...);    // return (10 + 20 + [30, 40, 50]);
	//     
}

stage-N

template<typename... Args> auto SumVal(Args ...Data)   //  ...Data  ===> (10, 20, 30, 40, 50) 
{
	return (Data + ...);    // return (10 + 20 + 30 + 40 + [50]);
}
----------------------------
Unary fold:

  Homogenous operation on all the values in the parameter pack.

Prefer Unary fold when the operation on the values held in the parameter pack is same, and the operation with a 2nd element ('z') is different from the operations on the values inside the pack.

USAGE: It is a addition on the elements in the pack
       It is a multiplication or something else on the second element with total sum values of the pack

auto z=100;
//Unary fold with addition on pack elements and a product of 'z'
return z * (pack + ...);  // ---> z * (Args1 + (... + (ArgsN-1 + ArgsN)))

Binary Fold:
Prefer Binary fold when the operation on the values held in the parameter pack and the 2nd value is also the same.

//binary fold  with addition operation on both the pack elements and 'z'  
return (z + ... + pack);   //Binary Left fold --> (((z + Args1) + Args2) + ...) + packN
--------------------------------
FOLD EXPRESSION INSTANTIATIONS:

template<typename... Args> auto SumVal(Args ...Data)
{
	return (Data + ...);
}

template<int> auto SumVal(int x1, int x2, int x3, int x4, int x5)
{...}

G++:- _Z6SumValiiiii

Hypothetical instantiation of the above variadic function for the call statement below:

cout << SumVal(10, 20, 30, 40, 50) << endl;   
*******************************************************
template<typename... Args> auto SumVal(Args ...Data)
{
	return (Data + ...);
}

template<int> auto SumVal(int x1, int x2)
{...}

Hypothetical instantiation of the above variadic function for the call statement below:

cout << SumVal(10, 20) << endl;
-------------------------------------------------
template<typename... Args> auto SumVal(Args ...Data)
{
	return (Data + ...);
}

template<float> auto SumVal(float x1, float x2, float x3, float x4)

DECORATED NAMES FOR THE ABOVE INSTANTIATION
MSVC : ??SumVal@@YAMMMMM@Z
G++  : _Z6SumValffff

SumVal(45.12f, 56.12f, 89.21f, 99.45f);
--------------------------------------------------------------
template<typename...Args> auto Compute(Args... pack)
{

}

template<typename T1, typename T2, typename T3, typename T4> auto Compute(T1 x1, T2 x2, T3 x3, T4 x4)
{

}

template<int, int, double, float> auto Compute(int x1, int x2, double x3, float x4)
{

}

auto result= Compute(20,49,12.34,5.12f);

----------------------------------------------
template<typename... PACK> auto SumVal(PACK... Data)
{
    return (Data + ...);      //  return  (10+(20+(30+(40+50))));   
}

SumVal(10, 20, 30, 40, 50) 
---------------------------------------------------------------------------
template<typename... Pack> void Process(Pack... Args)
{
    auto lm =[](auto& x){cout << x << endl;};  //C++14 -Generic lambda

    (lm(Args), ...);   //Fold over comma
}


(lm(Args),...);   ===>  (lm(10),lm(20),lm(30),lm("cpp"),lm(50.56f))

Process(10,20,30,"cpp",50.56f);

-------------------------------------------------------------
template<typename... Args> void VariadicFun1(Args... Data)
{
	(cout << ... << std::forward<Args>(Data));
	cout << endl;
}
***********************************************
                                                   56
cout << (12, 56, 87.90, 'c') << std::forward<int>(Data));

                                               12
cout << (56, 87.90, 'c') << std::forward<int>(Data));

                                           56
cout << (87.90, 'c') << std::forward<int>(Data));

                                      87.90
cout << ('c') << std::forward<double>(Data));

                                   c
cout << () << std::forward<char>(Data));
*********************************************************
int main()
{
	VariadicFun1(56, 12, 56, 87.90, 'c');
}	

-------------------------------------------------------------------------
